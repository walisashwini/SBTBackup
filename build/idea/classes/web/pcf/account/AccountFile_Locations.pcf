<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../pcf.xsd">
  <Page
    infoBar="AccountFileInfoBar(account)"
    canEdit="perm.Account.edit(account)"
    canVisit="perm.Account.view(account) and perm.System.accountcontacts"
    handlesValidationIssue="VALUE typeis entity.AccountLocation"
    id="AccountFile_Locations"
    title="DisplayKey.get(&quot;Web.AccountFile.Locations.Title&quot;)"
    validationParameter="account">
    <LocationEntryPoint
      signature="AccountFile_Locations(account : Account)"/>
    <LocationEntryPoint
      signature="AccountFile_Locations(account : Account, selectedLocation : AccountLocation)"/>
    <Variable
      name="account"
      type="Account"/>
    <Variable
      name="selectedLocation"
      type="AccountLocation"/>
    <Screen
      editable="true"
      id="AccountFile_LocationsScreen">
      <ListDetailPanel
        selectionName="accountLocation"
        selectionOnEnter="selectedLocation"
        selectionType="AccountLocation">
        <PanelRef
          def="AccountFile_LocationsLV(account, selectedLocation)"
          editable="true">
          <Toolbar
            visible="perm.Account.edit(account)">
            <ToolbarDivider/>
            <CheckedValuesToolbarButton
              checkedRowAction="CheckedValue.Active = !CheckedValue.Active"
              flags="all canChangeActiveStatus"
              id="changeActiveStatus"
              iterator="AccountFile_LocationsLV.AccountFile_LocationsLV"
              label="DisplayKey.get(&quot;Web.AccountFile.Locations.ChangeActiveStatus&quot;)"/>
            <CheckedValuesToolbarButton
              checkedRowAction="setPrimaryLocation(CheckedValue)"
              flags="all canSetToPrimary"
              id="setToPrimary"
              iterator="AccountFile_LocationsLV.AccountFile_LocationsLV"
              label="DisplayKey.get(&quot;Web.AccountFile.Locations.SetAsPrimary&quot;)"/>
            <ToolbarDivider/>
            <ToolbarButton
              action="AccountLocationPopup.push(null, account, true)"
              id="AddNewLocation"
              label="DisplayKey.get(&quot;Web.AccountFile.Locations.AddNewLocation&quot;)"
              visible="true"/>
            <CheckedValuesToolbarButton
              allCheckedRowsAction="removeLocations(CheckedValues)"
              flags="all canRemoveLocation"
              id="removeLocation"
              iterator="AccountFile_LocationsLV.AccountFile_LocationsLV"
              label="DisplayKey.get(&quot;Web.Account.Location.RemoveLocation&quot;)"/>
            <IteratorButtons
              iterator="AccountFile_LocationsLV.AccountFile_LocationsLV"/>
          </Toolbar>
        </PanelRef>
        <CardViewPanel>
          <Card
            id="LocationInfoCard"
            title="DisplayKey.get(&quot;Web.Account.Locations.Panel.GeneralInfo.Title&quot;)">
            <DetailViewPanel
              editable="true">
              <InputColumn>
                <InputSetRef
                  def="AccountLocationDetailInputSet(accountLocation)"
                  editable="true"/>
              </InputColumn>
            </DetailViewPanel>
            <PanelRef
              def="AccountFile_Locations_PolicyTermsLV(accountLocation)">
              <TitleBar
                title="DisplayKey.get(&quot;Web.AccountFile.Summary.PolicyTerms&quot;)"/>
              <Toolbar/>
            </PanelRef>
            <PanelRef
              def="AccountFile_Locations_WorkOrdersLV(accountLocation)">
              <TitleBar
                title="DisplayKey.get(&quot;Web.AccountFile.WorkOrders&quot;)"/>
              <Toolbar/>
            </PanelRef>
          </Card>
        </CardViewPanel>
      </ListDetailPanel>
    </Screen>
    <Code><![CDATA[function setPrimaryLocation(location : AccountLocation) {
       gw.transaction.Transaction.runWithNewBundle(\bundle -> {
          var account2 = bundle.add(account)
          var l = bundle.add(location)
          account2.PrimaryLocation = l
        })
      }
      
function removeLocations(locations : AccountLocation[]) {
  gw.transaction.Transaction.runWithNewBundle(\bundle -> {
    var localAccount = bundle.add(account)
    for(location in locations) {
      localAccount.removeLocation(location)
    }
  })
}]]></Code>
  </Page>
</PCF>
<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <PanelSet
    id="LobExclusionsAndConditionsPanelSet">
    <Require
      name="coverable"
      type="Coverable"/>
    <Require
      name="coverageCategories"
      type="String[]"/>
    <Require
      name="includeExclude"
      type="boolean"/>
    <Require
      name="jobWizardHelper"
      type="gw.api.web.job.JobWizardHelper"/>
    <Require
      name="coverageHelper"
      type="gw.lob.common.coverage.CoverageHelper"/>
    <Require
      name="scheduledItemHelper"
      type="gw.lob.common.schedules.ScheduledItemHelper"/>
    <Require
      name="additionalInsuredHelper"
      type="gw.lob.common.AbstractAdditionalInsuredHelper"/>
    <Variable
      initialValue="coverable == null ? null : filteredExclusions().map(\ excl -&gt; excl.Pattern )"
      name="addedExclusionsToShow"
      recalculateOnRefresh="true" type="gw.api.productmodel.ClausePattern[]"/>
    <Variable
      initialValue="coverable == null ? null : filteredConditions().map(\ cond -&gt; cond.Pattern )"
      name="addedConditionsToShow"
      recalculateOnRefresh="true" type="gw.api.productmodel.ClausePattern[]"/>
    <PanelRef>
      <Toolbar
        id="AdditionalExclusionsConditionsToolbar">
        <PickerToolbarButton
          action="LobCoveragePatternSearchPopup.push(coverable, CoveragePatternSearchType.TC_EXCLCOND, coverageCategories, includeExclude)"
          hideIfReadOnly="true"
          id="AddExclusionsOrCondition"
          label="DisplayKey.get(&quot;Web.Policy.Coverages.AddExclusionsOrCondition&quot;)"
          onPick="createExclusionsAndConditions( PickedValue )"/>
      </Toolbar>
      <PanelSet>
        <PanelRef
          def="LobClausesDV(coverable, addedExclusionsToShow, jobWizardHelper, coverageHelper, scheduledItemHelper, additionalInsuredHelper)"
          id="ExclusionsPanel">
          <TitleBar
            title="DisplayKey.get(&quot;Web.Policy.Coverages.Exclusions&quot;)"/>
        </PanelRef>
        <PanelRef
          def="LobClausesDV(coverable, addedConditionsToShow, jobWizardHelper, coverageHelper, scheduledItemHelper, additionalInsuredHelper)"
          id="ConditionsPanel">
          <TitleBar
            title="DisplayKey.get(&quot;Web.Policy.Coverages.PolicyConditions&quot;)"/>
        </PanelRef>
      </PanelSet>
    </PanelRef>
    <Code><![CDATA[function createExclusionsAndConditions(patterns: gw.api.productmodel.ClausePattern[]) {
  for (pattern in patterns) {
    if (pattern typeis gw.api.productmodel.ExclusionPattern) {
      coverable.createExclusion(pattern)
    } else if (pattern typeis gw.api.productmodel.ConditionPattern){
      coverable.createCondition(pattern)
    }
  }
}

function filteredExclusions() : Exclusion[] {
  var excllist : Exclusion[]
  if (coverable == null ) {
    return null
  }
  if (includeExclude) {
    return coverable.getExclusionsInCategories( coverageCategories )?.toTypedArray()
  } else {
    return coverable.getExclusionsNotInCategories( coverageCategories )?.toTypedArray()
  }
}

function filteredConditions() : PolicyCondition[] {
  var condlist : PolicyCondition[]
  if (coverable == null ) {
    return null
  }
  if (includeExclude ) {
    return coverable.getConditionsInCategories( coverageCategories )?.toTypedArray()
  } else {
    return coverable.getConditionsNotInCategories( coverageCategories )?.toTypedArray()
  }
}]]></Code>
  </PanelSet>
</PCF>
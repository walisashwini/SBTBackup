<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <Screen
    editable="rateBook.isDraft()"
    id="RateBookEditScreen">
    <Require
      name="rateBook"
      type="RateBook"/>
    <Require
      name="isEdit"
      type="Boolean"/>
    <Require
      name="currentCard"
      type="gw.rating.rtm.util.RatingUIUtil.RateBookCardTabType"/>
    <Variable
      initialValue="new gw.pcf.rating.ratebook.RateBookEditScreenUIHelper (rateBook, CurrentLocation)"
      name="rateBookEditScreenUI"
      type="gw.pcf.rating.ratebook.RateBookEditScreenUIHelper"/>
    <Variable
      initialValue="new gw.pcf.exportimport.ExcelImportUIHelper(rateBook)"
      name="importHelper"
      type="gw.pcf.exportimport.ExcelImportUIHelper"/>
    <Toolbar
      visible="true">
      <ToolbarButton
        action="importHelper.doImportRateTables(); rateBookEditScreenUI.checkCurrentDataChange()"
        hideIfReadOnly="true"
        id="UpdateButton"
        label="DisplayKey.get(&quot;Button.Update&quot;)"
        shortcut="U"
        visible="rateBookEditScreenUI.RateBook.isDraft()"/>
      <EditButtons
        cancelLabel="((rateBook.isDraft()) ? DisplayKey.get(&quot;Button.Cancel&quot;) : DisplayKey.get(&quot;Web.Rating.RateBooks.ExitButton&quot;))"
        cancelVisible="true"
        editVisible="rateBook.isDraft()"
        showUpdateConfirmMessage="false"
        updateVisible="false"/>
    </Toolbar>
    <AlertBar
      id="RateTableImportedMessageBar"
      label="DisplayKey.get(&quot;Web.Rating.Import.Scan.Summary&quot;, importHelper.TableCodesOfAddedTables.Count, importHelper.TableCodesOfChangedTables.Count, importHelper.TableCodesOfLargeTables.Count)"
      visible="importHelper.ScanCompletedSuccessfully"/>
    <PanelRow>
      <PanelColumn>
        <PanelRef
          def="RateBookDV(rateBook)"/>
      </PanelColumn>
      <PanelColumn>
        <PanelRef
          def="LocalizedValuesDV(rateBook, { &quot;BookName&quot;, &quot;BookDesc&quot;}, { DisplayKey.get(&quot;Web.Rating.RateBooks.Name&quot;), DisplayKey.get(&quot;Web.Rating.RateBooks.Description&quot;) })"/>
      </PanelColumn>
    </PanelRow>
    <CardViewPanel>
      <Variable
        name="importedExcelFile"
        type="org.apache.poi.xssf.usermodel.XSSFWorkbook"/>
      <Card
        id="RateTablesCard"
        selectOnEnter="currentCard == gw.rating.rtm.util.RatingUIUtil.RateBookCardTabType.TableCard"
        title="DisplayKey.get(&quot;Web.Rating.RateBooks.RateTables&quot;)">
        <PanelRow>
          <PanelColumn>
            <PanelRef
              editable="rateBook.Status == RateBookStatus.TC_DRAFT">
              <TitleBar
                title="DisplayKey.get(&quot;Web.Rating.RateBooks.SelectedRateTablesTitle&quot;)"/>
              <Toolbar
                visible="rateBook.Status == RateBookStatus.TC_DRAFT">
                <PickerToolbarButton
                  action="if (importHelper.ReimportDisabled) { throw new gw.api.util.DisplayableException(DisplayKey.get(&quot;Web.Rating.Import.ChangedRateBook&quot;)) }  else { ExcelImportPopup.push()}"
                  id="ImportFromSpreadsheetButton"
                  label="DisplayKey.get(&quot;Web.Rating.Import.Import&quot;)"
                  onPick="importHelper.scan(PickedValue as org.apache.poi.xssf.usermodel.XSSFWorkbook)"/>
                <CheckedValuesToolbarButton
                  allCheckedRowsAction="removeTables(CheckedValues)"
                  available="perm.System.ratebookedit"
                  id="RemoveFromRateBookButton"
                  iterator="SelectedRateTablesList"
                  label="DisplayKey.get(&quot;Web.Rating.RateBooks.RemoveFromRateBookButton&quot;)"
                  retainScrollPosition="true"
                  tooltip="DisplayKey.get(&quot;Web.Rating.RateBooks.RemoveFromRateBookTooltip&quot;)"/>
                <ToolbarButton
                  action="importHelper.exportErrorFile()"
                  available="importHelper.HasErrors"
                  download="attachment"
                  id="ExportErrorsButton"
                  label="DisplayKey.get(&quot;Web.Rating.Export.Errors&quot;)"/>
              </Toolbar>
              <ListViewPanel>
                <RowIterator
                  checkBoxVisible="rateBook.Status == RateBookStatus.TC_DRAFT"
                  editable="true"
                  elementName="selectedRateTable"
                  hasCheckBoxes="true"
                  id="SelectedRateTablesList"
                  value="rateBook != null ? rateBook.RateTables.orderBy(\ rt -&gt; rt.Definition.TableName).toTypedArray() : gw.api.upgrade.Coercions.makeArray&lt;entity.RateTable&gt;(java.util.Collections.EMPTY_LIST)"
                  valueType="entity.RateTable[]">
                  <Row>
                    <LinkCell
                      available="isEdit"
                      label="DisplayKey.get(&quot;Web.Rating.RateBooks.PendingImport&quot;)">
                      <Link
                        icon="importHelper.getIcon(selectedRateTable)"
                        iconType="svgFileName"
                        id="RateTableIcon"
                        tooltip="importHelper.getIconLabel(selectedRateTable)"/>
                    </LinkCell>
                    <TextCell
                      id="Name"
                      label="DisplayKey.get(&quot;Web.Rating.RateBooks.TableName&quot;)"
                      value="selectedRateTable.Definition.TableName"/>
                    <ModalCellRef
                      def="RateTableStrategyCell(selectedRateTable)"
                      editable="true"
                      label="DisplayKey.get(&quot;Web.Rating.RateTables.Strategy&quot;)"
                      mode="selectedRateTable.Owned ? &quot;owning&quot; : &quot;default&quot;"
                      tooltip="DisplayKey.get(&quot;Web.Rating.RateTables.StrategyHelp&quot;)"/>
                  </Row>
                </RowIterator>
              </ListViewPanel>
            </PanelRef>
          </PanelColumn>
          <PanelColumn>
            <PanelRef
              id="AvailableRateTablesPanel"
              visible="rateBook.isDraft()">
              <TitleBar
                title="DisplayKey.get(&quot;Web.Rating.Ratebooks.AvailableRatingTables&quot;)"/>
              <Toolbar
                visible="rateBook.Status == RateBookStatus.TC_DRAFT">
                <CheckedValuesToolbarButton
                  allCheckedRowsAction="rateBook.addRateTables(CheckedValues)"
                  available="perm.System.ratebookedit"
                  id="AddToRateBookButton"
                  iterator="AvailableRateTablesList"
                  label="DisplayKey.get(&quot;Web.Rating.RateBooks.AddToRatebookButton&quot;)"
                  retainScrollPosition="true"/>
              </Toolbar>
              <ListViewPanel>
                <RowIterator
                  checkBoxVisible="rateBook.Status == RateBookStatus.TC_DRAFT"
                  editable="false"
                  elementName="availableRateTable"
                  hasCheckBoxes="true"
                  id="AvailableRateTablesList"
                  value="rateBook != null ? rateBook.availableRateTables(rateBook.PolicyLine).orderBy(\ t -&gt; t.TableName).toTypedArray() : gw.api.upgrade.Coercions.makeArray&lt;entity.RateTableDefinition&gt;(java.util.Collections.EMPTY_LIST)"
                  valueType="entity.RateTableDefinition[]">
                  <Row>
                    <TextCell
                      id="Name"
                      label="DisplayKey.get(&quot;Web.Rating.RateBooks.TableName&quot;)"
                      value="availableRateTable.TableName"/>
                  </Row>
                </RowIterator>
              </ListViewPanel>
            </PanelRef>
          </PanelColumn>
        </PanelRow>
      </Card>
      <Card
        id="CalcRoutinesCard"
        selectOnEnter="currentCard == gw.rating.rtm.util.RatingUIUtil.RateBookCardTabType.RoutineCard"
        title="DisplayKey.get(&quot;Web.Rating.RateBooks.CalcRoutines&quot;)">
        <PanelRow>
          <PanelColumn>
            <PanelRef
              editable="rateBook.Status == RateBookStatus.TC_DRAFT"
              id="IncludedCalcRoutinesPanel">
              <TitleBar
                title="DisplayKey.get(&quot;Web.Rating.RateBooks.SelectedRateRoutinesTitle&quot;)"/>
              <Toolbar
                visible="rateBook.Status == RateBookStatus.TC_DRAFT">
                <CheckedValuesToolbarButton
                  allCheckedRowsAction="rateBook.removeCalcRoutines(CheckedValues)"
                  available="perm.System.ratebookedit"
                  id="RemoveRoutineFromRateBookButton"
                  iterator="SelectedCalcRoutinesList"
                  label="DisplayKey.get(&quot;Web.Rating.RateBooks.RemoveFromRateBookButton&quot;)"
                  retainScrollPosition="true"/>
              </Toolbar>
              <ListViewPanel>
                <RowIterator
                  checkBoxVisible="rateBook.Status == RateBookStatus.TC_DRAFT"
                  editable="false"
                  elementName="selectedCalcRoutine"
                  hasCheckBoxes="true"
                  id="SelectedCalcRoutinesList"
                  value="rateBook != null ? rateBook.updatedCalcRoutines.orderBy(\ r -&gt; r.Code).toTypedArray() : gw.api.upgrade.Coercions.makeArray&lt;entity.CalcRoutineDefinition&gt;(java.util.Collections.EMPTY_LIST)"
                  valueType="entity.CalcRoutineDefinition[]">
                  <IteratorSort
                    sortBy="selectedCalcRoutine.Code"
                    sortOrder="1"/>
                  <IteratorSort
                    sortBy="selectedCalcRoutine.BranchingFieldValues[0]"
                    sortOrder="2"/>
                  <IteratorSort
                    sortBy="selectedCalcRoutine.Version"
                    sortDirection="descending"
                    sortOrder="3"/>
                  <Row>
                    <TextCell
                      id="Code"
                      label="DisplayKey.get(&quot;Web.Rating.RateBooks.CalcRoutineCode&quot;)"
                      value="selectedCalcRoutine.Code"/>
                    <TypeKeyCell
                      id="Jurisdiction"
                      label="DisplayKey.get(&quot;Web.Rating.RateBooks.CalcRoutineJurisdiction&quot;)"
                      value="selectedCalcRoutine.Jurisdiction"
                      valueType="typekey.Jurisdiction"/>
                    <TextCell
                      align="left"
                      id="Version"
                      label="DisplayKey.get(&quot;Web.Rating.RateBooks.CalcRoutineVersion&quot;)"
                      value="selectedCalcRoutine.Version"
                      valueType="java.lang.Integer"/>
                  </Row>
                </RowIterator>
              </ListViewPanel>
            </PanelRef>
          </PanelColumn>
          <PanelColumn>
            <PanelRef
              id="AvailableCalcRoutinesPanel"
              visible="rateBook.isDraft()">
              <TitleBar
                title="DisplayKey.get(&quot;Web.Rating.RateBooks.AvailableCalcRoutinesTitle&quot;)"/>
              <Toolbar
                visible="rateBook.Status == RateBookStatus.TC_DRAFT">
                <CheckedValuesToolbarButton
                  allCheckedRowsAction="rateBookEditScreenUI.addToRateBookAction(CheckedValues)"
                  available="perm.System.ratebookedit"
                  id="AddRoutineToRateBookButton"
                  iterator="AvailableCalcRoutinesList"
                  label="DisplayKey.get(&quot;Web.Rating.RateBooks.AddToRatebookButton&quot;)"
                  retainScrollPosition="true"/>
              </Toolbar>
              <ListViewPanel>
                <Variable
                  initialValue="rateBook != null ? rateBook.availableCalcRoutines(true).map(\ c -&gt; new gw.web.rating.CalcRoutineCodeAndVersion(c)).orderBy(\ r -&gt; r.Code).toTypedArray() : {}"
                  name="availableCalcRoutineCodeAndVersions"
                  recalculateOnRefresh="true"
                  type="gw.web.rating.CalcRoutineCodeAndVersion[]"/>
                <RowIterator
                  checkBoxVisible="rateBook.Status == RateBookStatus.TC_DRAFT"
                  editable="true"
                  elementName="availableCalcRoutineCodeAndVersion"
                  hasCheckBoxes="true"
                  id="AvailableCalcRoutinesList"
                  value="availableCalcRoutineCodeAndVersions"
                  valueType="gw.web.rating.CalcRoutineCodeAndVersion[]">
                  <Row>
                    <TextCell
                      id="Code"
                      label="DisplayKey.get(&quot;Web.Rating.RateBooks.CalcRoutineCode&quot;)"
                      value="availableCalcRoutineCodeAndVersion.Code"/>
                    <TextCell
                      id="Jurisdiction"
                      label="DisplayKey.get(&quot;Web.Rating.RateBooks.CalcRoutineJurisdiction&quot;)"
                      value="availableCalcRoutineCodeAndVersion.BranchValues.first()"
                      valueType="java.lang.Object"/>
                    <RangeCell
                      align="left"
                      editable="true"
                      id="Version"
                      label="DisplayKey.get(&quot;Web.Rating.RateBooks.CalcRoutineVersion&quot;)"
                      required="true"
                      value="availableCalcRoutineCodeAndVersion.Version"
                      valueRange="rateBook.availableCalcRoutines(false).where(\ calcRoutine -&gt; availableCalcRoutineCodeAndVersion.isMatchIgnoreVersion(calcRoutine))*.Version"
                      valueType="java.lang.Integer">
                      <PostOnChange/>
                    </RangeCell>
                  </Row>
                </RowIterator>
              </ListViewPanel>
            </PanelRef>
          </PanelColumn>
        </PanelRow>
      </Card>
    </CardViewPanel>
    <Code><![CDATA[function removeTables(tablesToRemove : RateTable[]) {
  rateBookEditScreenUI.clearChanges(tablesToRemove)
  importHelper.removeTables(tablesToRemove.toList())
  rateBook.removeRateTables(tablesToRemove)
}]]></Code>
  </Screen>
</PCF>

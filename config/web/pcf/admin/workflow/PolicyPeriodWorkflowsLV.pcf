<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <ListViewPanel
    id="PolicyPeriodWorkflowsLV">
    <ExposeIterator
      valueType="entity.Workflow"
      widget="PolicyPeriodWorkflowsLV"/>
    <Require
      name="workflows"
      type="gw.api.database.IQueryBeanResult&lt;Workflow&gt;"/>
    <Require
      name="isParent"
      type="boolean"/>
    <RowIterator
      appendPageInfo="true"
      checkBoxVisible="workflow.State != TC_COMPLETED"
      editable="false"
      elementName="workflow"
      hasCheckBoxes="true"
      id="workflowIterator"
      value="workflows"
      valueType="gw.api.database.IQueryBeanResult&lt;entity.Workflow&gt;">
      <!-- <ToolbarFlag
        condition="Workflow.State == &quot;Error&quot; || Workflow.State == &quot;Suspended&quot;"
        name="canResume"/>  <ToolbarFlag
        condition="Workflow.isTriggerAvailable(&quot;Withdraw&quot;)"
        name="canWithdraw"/> -->
      <Row>
        <TextCell
          action="JobForward.go((workflow as PolicyPeriodWorkflow).PolicyPeriod.Job)"
          actionAvailable="(User.util.CurrentUser as User).canView( (workflow as PolicyPeriodWorkflow).PolicyPeriod.Job )"
          align="left"
          id="JobNumber"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.JobNumber&quot;)"
          value="(workflow as PolicyPeriodWorkflow).PolicyPeriod.Job.JobNumber"/>
        <TextCell
          action="PolicyFileForward.go((workflow as PolicyPeriodWorkflow).PolicyPeriod, (workflow as PolicyPeriodWorkflow).PolicyPeriod.EditEffectiveDate)"
          actionAvailable="(User.util.CurrentUser as User).canView( (workflow as PolicyPeriodWorkflow).PolicyPeriod )"
          align="left"
          id="PolicyNumber"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.PolicyNumber&quot;)"
          sortBy="(workflow as PolicyPeriodWorkflow).PolicyPeriod.PolicyNumber"
          value="(workflow as PolicyPeriodWorkflow).PolicyPeriod.PolicyNumberDisplayString"/>
        <TextCell
          align="left"
          id="Product"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.Product&quot;)"
          sortBy="(workflow as PolicyPeriodWorkflow).PolicyPeriod.Policy.ProductCode"
          value="(workflow as PolicyPeriodWorkflow).PolicyPeriod.Policy.Product"
          valueType="gw.api.productmodel.Product"/>
        <TextCell
          action="JobForward.go((workflow as PolicyPeriodWorkflow).PolicyPeriod.Job)"
          actionAvailable="(User.util.CurrentUser as User).canView( (workflow as PolicyPeriodWorkflow).PolicyPeriod.Job )"
          align="left"
          enableSort="false"
          id="JobType"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.JobType&quot;)"
          value="(workflow as PolicyPeriodWorkflow).PolicyPeriod.Job.DisplayType"/>
        <TypeKeyCell
          action="WorkflowDetail.go(workflow)"
          align="left"
          id="Type"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.Type&quot;)"
          value="workflow.Subtype"
          valueType="typekey.Workflow"/>
        <TextCell
          align="left"
          id="ProcessVersion"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.ProcessVersion&quot;)"
          value="workflow.ProcessVersion"
          valueType="java.lang.Integer"/>
        <DateCell
          align="left"
          dateFormat="medium"
          id="StartTime"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.StartTime&quot;)"
          sortDirection="descending"
          sortOrder="1"
          timeFormat="medium"
          value="workflow.CreateTime"/>
        <DateCell
          align="left"
          dateFormat="medium"
          id="UpdateTime"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.UpdateTime&quot;)"
          timeFormat="medium"
          value="workflow.UpdateTime"/>
        <TextCell
          align="left"
          enableSort="false"
          id="Insured"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.Insured&quot;)"
          value="(workflow as PolicyPeriodWorkflow).PolicyPeriod.Policy.Account.AccountHolder.AccountContact.DisplayName"/>
        <TextCell
          action="WorkflowDetail.go(workflow.Caller)"
          actionAvailable="workflow.Caller != null"
          align="left"
          id="Parent"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.Parent&quot;)"
          sortBy="workflow.Caller.PublicID"
          value="workflow.Caller"
          valueType="entity.Workflow"
          visible="!isParent"/>
        <TextCell
          align="left"
          id="CurrentStep"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.Step&quot;)"
          value="workflow.CurrentStep"/>
        <TypeKeyCell
          align="left"
          id="Status"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.Status&quot;)"
          value="workflow.State"
          valueType="typekey.WorkflowState"/>
        <TypeKeyCell
          align="left"
          id="ActiveState"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.ActiveState&quot;)"
          value="workflow.ActiveState"
          valueType="typekey.WorkflowActiveState"/>
        <TextCell
          align="left"
          enableSort="false"
          id="WorkItemState"
          label="DisplayKey.get(&quot;Web.Admin.Workflows.WorkItem&quot;)"
          value="workItemDisplayValue(workflow)"/>
      </Row>
    </RowIterator>
    <Code><![CDATA[function workItemDisplayValue(wf : Workflow) : String {
        if (wf.State == TC_ACTIVE) {
          var wi = wf.ActiveWorkflowWorkItem
          if (wi != null) {
            if (wi.Status == TC_CHECKEDOUT) {
                return wi.CheckedOutBy
            }
            return wi.Status as String
          }
        }
        return null
      }]]></Code>
  </ListViewPanel>
</PCF>
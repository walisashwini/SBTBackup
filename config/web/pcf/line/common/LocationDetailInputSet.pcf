<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../pcf.xsd">
  <InputSet
    id="LocationDetailInputSet">
    <Require
      name="polLocation"
      type="PolicyLocation"/>
    <Require
      name="supportsNonSpecificLocation"
      type="boolean"/>
    <Require
      name="openForEdit"
      type="boolean"/>
    <Variable
      initialValue="new gw.api.spotlight.SpotlightURLs()"
      name="spotlight"
      type="gw.api.spotlight.SpotlightURLs"/>
    <BooleanRadioInput
      editable="polLocation.AccountLocation.New"
      id="NonSpecificLocation"
      label="DisplayKey.get(&quot;Web.Account.Locations.LocationIsNonSpecific&quot;)"
      value="polLocation.AccountLocation.NonSpecific"
      visible="not polLocation.AccountLocation.New or supportsNonSpecificLocation">
      <PostOnChange/>
    </BooleanRadioInput>
    <TextInput
      editable="true"
      id="LocationCode"
      label="DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.LocationCode&quot;)"
      value="polLocation.AccountLocation.LocationCode"
      visible="polLocation.Branch.Policy.Product.Commercial"/>
    <TextInput
      editable="true"
      id="LocationName"
      label="DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.LocationName&quot;)"
      value="polLocation.AccountLocation.LocationName"
      visible="polLocation.Branch.Policy.Product.Commercial"/>
    <InputSetRef
      def="TargetedAddressInputSet(new gw.pcf.policylocation.PolicyLocationAddressOwner(polLocation))"
      mode="polLocation.CountryCode"
      visible="polLocation.SyncedToAccount"
      widgets="LocationDetailInputSet"/>
    <InputSet
      id="UnsyncedAddressInputSet"
      visible="not polLocation.SyncedToAccount">
      <TextInput
        id="unsyncedAddressString"
        label="DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.Address&quot;)"
        value="polLocation.addressString(&quot;\n&quot;, false, false)"/>
      <TextInput
        editable="true"
        id="UnsyncedCounty"
        label="DisplayKey.get(&quot;Web.ContactDetail.AddressDetail.County&quot;)"
        value="polLocation.County"/>
      <TypeKeyInput
        editable="polLocation.canChangeState()"
        id="UnsyncedCountry"
        label="DisplayKey.get(&quot;Web.ContactDetail.AddressDetail.Country&quot;)"
        required="true"
        value="polLocation.Country"
        valueType="typekey.Country">
        <PostOnChange/>
      </TypeKeyInput>
    </InputSet>
    <InputSetRef
      def="GlobalPhoneInputSet(new gw.api.phone.BasicPhoneOwner(new gw.api.phone.EntityPhoneDelegate(polLocation.AccountLocation, AccountLocation#Phone), DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.Phone&quot;), openForEdit))"
      editable="true"
      id="Phone"
      visible="true"/>
    <PickerInput
      available="gw.api.domain.StateSet.get(&quot;TaxLocation&quot;).contains(polLocation.State)"
      editable="true"
      id="TaxLocation"
      inputConversion="getTaxLocation(VALUE, polLocation)"
      label="DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.TaxLocation&quot;)"
      pickLocation="TaxLocationSearchPopup.push(polLocation.Branch, gw.api.util.JurisdictionMappingUtil.getJurisdiction(polLocation))"
      value="polLocation.TaxLocation"
      valueType="entity.TaxLocation"
      visible="polLocation.Branch.Lines.hasMatch(\ l -&gt; l.EmergencyServiceFunding)"/>
    <InputSetRef
      def="TerritoryCodeInputSet(polLocation)"/>
    <Code><![CDATA[uses gw.api.util.DisplayableException

function getTaxLocation(code: String, policyLocation: PolicyLocation): TaxLocation {
  if (code == null) {
    return null
  } else {
    var state = gw.api.util.JurisdictionMappingUtil.getJurisdiction(policyLocation)
    var locs = new gw.lob.common.TaxLocationQueryBuilder()
        .withCodeStarting(code)
        .withState(state)
        .withEffectiveOnDate(policyLocation.Branch.PeriodStart)
        .build().select() as gw.api.database.IQueryBeanResult<TaxLocation>
    if (locs.Count == 1) {
      return locs.FirstResult
    } else {
      throw new DisplayableException(DisplayKey.get("TaxLocation.Search.Error.InvalidCode", code, state.Description))
    }
  }
}]]></Code>
  </InputSet>
</PCF>
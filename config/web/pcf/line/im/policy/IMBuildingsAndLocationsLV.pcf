<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <ListViewPanel
    id="IMBuildingsAndLocationsLV"
    stretch="true">
    <ExposeIterator
      flags="removeAvailable,removeAvailable"
      valueType="entity.IMLocation"
      widget="IMBuildingsAndLocationsLV"/>
    <Require
      name="imLine"
      type="InlandMarineLine"/>
    <Require
      name="openForEdit"
      type="boolean"/>
    <Require
      name="jobWizardHelper"
      type="gw.api.web.job.JobWizardHelper"/>
    <Variable
      initialValue="10"
      name="maxUnusedBuildings"
      type="int"/>
    <RowIterator
      checkBoxVisible="false"
      editable="true"
      elementName="imLocation"
      hideCheckBoxesIfReadOnly="true"
      numEntriesRequired="0"
      pageSize="5"
      pickLocation="IMLocationPopup.push(imLine, true, true)"
      toRemove="imLine.removeFromLineSpecificLocations(imLocation)"
      validationLabel="DisplayKey.get(&quot;Web.Policy.LocationContainer.Locations&quot;)"
      value="imLine.IMLocations"
      valueType="entity.IMLocation[]">
      <Variable
        initialValue="imLocation.UnusedBuildings"
        name="unusedBuildings"
        type="entity.Building[]"/>
      <IteratorSort
        sortBy="imLocation.Location.LocationNum"
        sortOrder="1"/>
      <!-- Need a toolbar flag to control the "Remove" button explicitly in a nested LV -->
      <ToolbarFlag
        name="removeAvailable"/>
      <Row
        useArchivedStyle="false"
        useTitleStyle="true">
        <TextCell
          align="center"
          hideChildrenIfReadOnly="false"
          id="Actions"
          label="DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.Actions&quot;)"
          value="&quot;&quot;"
          visible="openForEdit">
          <MenuItem
            id="AddBuilding"
            label="DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.AddBuilding&quot;)"
            visible="openForEdit">
            <MenuItem
              action="IMBuildingPopup.push(imLine, imLocation, openForEdit, jobWizardHelper)"
              id="AddNewBuilding"
              label="DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.CreateNewBuilding&quot;)"/>
            <MenuItem
              id="AddExistingBuildings"
              label="DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.ExistingBuilding&quot;)">
              <MenuItemIterator
                elementName="unusedBuilding"
                id="UnusedBuildingIterator"
                value="getLimitedNumberOfSortedUnusedBuildings(unusedBuildings, maxUnusedBuildings)"
                valueType="entity.Building[]">
                <IteratorSort
                  sortBy="unusedBuilding.BuildingNum"
                  sortOrder="1"/>
                <MenuItem
                  action="IMBuildingPopup.push(imLine, imLocation, unusedBuilding, openForEdit, jobWizardHelper)"
                  id="UnassignedBuilding"
                  label="unusedBuilding.DisplayName"/>
              </MenuItemIterator>
              <MenuItem
                action="MoreIMBuildingsPopup.push(imLocation, unusedBuildings, openForEdit)"
                id="AddMoreBuildings"
                label="DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.MoreBuildings&quot;)"
                visible="unusedBuildings.Count &gt; maxUnusedBuildings"/>
            </MenuItem>
          </MenuItem>
          <MenuItem
            action="imLine.removeFromLineSpecificLocations(imLocation)"
            confirmMessage="imLocation.hasSign() or imLocation.isReferencedByAccountsReceivable() ? DisplayKey.get(&quot;Web.Policy.LocationContainer.RemoveLocationAndSignConfirmMsg&quot;) : DisplayKey.get(&quot;Web.Policy.LocationContainer.RemoveLocationConfirmMsg&quot;)"
            id="RemoveLocation"
            label="DisplayKey.get(&quot;Web.Policy.LocationContainer.RemoveLocation&quot;)"
            visible="openForEdit"/>
        </TextCell>
        <TextCell
          action="IMLocationPopup.push(imLocation, openForEdit, true)"
          colspan="5"
          grow="true"
          id="LocationName"
          label="DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.Building.Description&quot;)"
          value="imLocation.DisplayName"/>
      </Row>
      <RowIterator
        checkBoxVisible="openForEdit"
        editable="true"
        elementName="imBuilding"
        hasCheckBoxes="true"
        id="buildingIterator"
        pageSize="0"
        toRemove="imLocation.removeFromLineSpecificBuildings(imBuilding)"
        value="imLocation.Buildings"
        valueType="entity.IMBuilding[]">
        <IteratorSort
          sortBy="imBuilding.Building.BuildingNum"
          sortOrder="1"/>
        <ToolbarFlag
          name="removeAvailable"/>
        <Row>
          <EmptyCell
            id="BlankCell2"
            visible="openForEdit"/>
          <TextCell
            action="IMBuildingPopup.push(imLine, imBuilding, openForEdit, jobWizardHelper)"
            align="left"
            colspan="5"
            grow="true"
            id="BuildingDescription"
            value="imBuilding"
            valueType="entity.IMBuilding"
            visible="not imLocation.Buildings.IsEmpty"/>
        </Row>
      </RowIterator>
    </RowIterator>
    <Code><![CDATA[function getLimitedNumberOfSortedUnusedBuildings(buildings : Building[], numBuildings : int) : Building[] {
  var sortedBuildings = buildings.toList().sortBy(\building -> building.BuildingNum)
  if (sortedBuildings.Count > numBuildings) {
    sortedBuildings = sortedBuildings.subList(0, numBuildings)
  }
  return sortedBuildings.toTypedArray()
}]]></Code>
  </ListViewPanel>
</PCF>
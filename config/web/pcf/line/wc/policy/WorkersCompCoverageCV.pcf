<?xml version="1.0"?>
<PCF
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:noNamespaceSchemaLocation="../../../../../../../pcf.xsd">
  <CardViewPanel
    id="WorkersCompCoverageCV">
    <Require
      name="wcLine"
      type="WorkersCompLine"/>
    <Require
      name="openForEdit"
      type="boolean"/>
    <Variable
      initialValue="wcLine.InterstateNamedInsuredOfficialIDs"
      name="namedInsuredOfficialIDs"
      recalculateOnRefresh="true"
      type="OfficialID[]"/>
    <Card
      id="StateCoverages"
      title="DisplayKey.get(&quot;Web.Policy.WC.StateCoverages&quot;)">
      <DetailViewPanel
        available="namedInsuredOfficialIDs.Count &gt; 0"
        id="NamedInsuredOfficialIDDV"
        visible="namedInsuredOfficialIDs.Count &gt; 0">
        <InputColumn>
          <Label
            id="InterstateLabel"
            label="DisplayKey.get(&quot;Web.Policy.WC.Interstate&quot;)"/>
          <InputIterator
            elementName="officialId"
            id="officialIDs"
            value="namedInsuredOfficialIDs"
            valueType="entity.OfficialID[]">
            <TextInput
              align="left"
              editable="true"
              id="ANI_OfficialIDEntry"
              label="officialId.OfficialIDInsuredAndType"
              validationExpression="officialId.validateValue()"
              value="officialId.OfficialIDValue">
              <PostOnChange
                deferUpdate="false"/>
            </TextInput>
          </InputIterator>
        </InputColumn>
      </DetailViewPanel>
      <PanelRef>
        <Toolbar>
          <AddButton
            id="AddCoveredJurisdiction"
            iterator="PolicyLinePerStateConfig_LV"
            label="DisplayKey.get(&quot;Web.Policy.WC.AddCoveredJurisdiction&quot;)">
            <AddMenuItemIterator
              elementName="locationState"
              value="gw.web.line.wc.policy.WorkersCompCoverageCVUIHelper.JurisdictionsThatCanBeAdded(wcLine)"
              valueType="typekey.Jurisdiction[]">
              <AddMenuItem
                id="addJurisdiction"
                iterator="PolicyLinePerStateConfig_LV"
                label="locationState"
                toCreateAndAdd="return wcLine.addJurisdiction(locationState)"/>
            </AddMenuItemIterator>
          </AddButton>
          <IteratorButtons
            addVisible="false"
            iterator="PolicyLinePerStateConfig_LV"
            removeFlags="all removable"
            removeVisible="true"/>
          <ToolbarButton
            action="gw.web.line.wc.policy.WorkersCompCoverageCVUIHelper.updateAllBasis(wcLine, CurrentLocation)"
            hideIfReadOnly="true"
            id="SplitBases"
            label="DisplayKey.get(&quot;Web.Policy.WC.SplitBases&quot;)"/>
          <!-- http://jira/jira/browse/CC-38105 -->
          <CheckedValuesToolbarButton
            allCheckedRowsAction="SplitPeriodPopup.push( wcLine, CheckedValues )"
            hideIfReadOnly="true"
            id="SplitPeriod"
            iterator="PolicyLinePerStateConfig_LV"
            label="DisplayKey.get(&quot;Web.Policy.WC.SplitPeriod&quot;)"/>
        </Toolbar>
        <ListDetailPanel
          selectionName="selectedJurisdiction"
          selectionType="WCJurisdiction">
          <ListViewPanel
            available="selectedJurisdiction != null"
            id="PolicyLinePerStateConfig_LV"
            visible="true">
            <RowIterator
              checkBoxVisible="openForEdit"
              editable="false"
              elementName="covJuris"
              toRemove="wcLine.removeJurisdiction( covJuris ); gw.api.util.LocationUtil.addRequestScopedInfoMessage(DisplayKey.get(&quot;Web.Policy.WC.RemoveJurisdictionWarning&quot;)) "
              value="wcLine.Jurisdictions"
              valueType="entity.WCJurisdiction[]">
              <IteratorSort
                sortBy="covJuris.State.DisplayName"
                sortOrder="1"/>
              <ToolbarFlag
                condition="covJuris.CanRemove"
                name="removable"/>
              <Row>
                <TextCell
                  id="StateName"
                  label="DisplayKey.get(&quot;Web.Policy.LocationContainer.Location.State&quot;)"
                  value="covJuris.State"
                  valueType="typekey.Jurisdiction"/>
                <TextCell
                  id="RiskID"
                  label="DisplayKey.get(&quot;Web.Policy.PolicyLine.PerState.OfficialIDs&quot;)"
                  numEntries="5"
                  outputConversion="gw.web.line.wc.policy.WorkersCompCoverageCVUIHelper.outputConverterForOfficialIDs(VALUE)"
                  value="gw.web.line.wc.policy.WorkersCompCoverageCVUIHelper.getOfficalIDsForJurisdictionThatMatchPNIContactsOfficialIDs(wcLine, covJuris)"
                  valueType="entity.OfficialID[]"
                  wrap="true"/>
              </Row>
            </RowIterator>
          </ListViewPanel>
          <CardViewPanel>
            <Card
              id="GeneralInfoCard"
              title="DisplayKey.get(&quot;Web.Policy.PolicyLine.PerState.Panel.GeneralInfo.Title&quot;)">
              <PanelRef
                def="PolicyLinePerStateConfigDV(wcLine, selectedJurisdiction)"/>
              <PanelRef>
                <TitleBar
                  title="DisplayKey.get(&quot;Web.Policy.WC.CoveredEmployees&quot;)"/>
                <DetailViewPanel>
                  <InputColumn>
                    <InputSetRef
                      def="WorkersCompClassesInputSet(selectedJurisdiction, wcLine)"/>
                  </InputColumn>
                </DetailViewPanel>
              </PanelRef>
            </Card>
          </CardViewPanel>
        </ListDetailPanel>
      </PanelRef>
    </Card>
    <Card
      id="PolicyCoverages"
      title="DisplayKey.get(&quot;Web.Policy.WC.PolicyCoveragesAndExclusions&quot;)">
      <PanelRef>
        <DetailViewPanel
          id="WCPolicyCoveragesDV">
          <Variable
            initialValue="wcLine.Pattern.getCoverageCategoryByPublicId(&quot;WorkersCompGrp&quot;).coveragePatternsForEntity(WorkersCompLine).whereSelectedOrAvailable(wcLine, openForEdit).where(\ c -&gt; c.DisplayName != &quot;Workers' Comp&quot;)"
            name="wcGroupCoveragePatterns"
            recalculateOnRefresh="true"
            type="gw.api.productmodel.CoveragePattern[]"/>
          <Variable
            initialValue="wcLine.Pattern.getCoverageCategoryByPublicId(&quot;WorkersCompGrp&quot;).exclusionPatternsForEntity(WorkersCompLine).whereSelectedOrAvailable(wcLine, openForEdit).where(\ e -&gt; e.DisplayName != &quot;Workers' Comp&quot;)"
            name="wcGroupExclusionPatterns"
            recalculateOnRefresh="true"
            type="gw.api.productmodel.ExclusionPattern[]"/>
          <InputColumn>
            <Label
              label="DisplayKey.get(&quot;Web.Policy.WC.WCCoveredStates&quot;)"/>
            <TextInput
              id="CoveredStates"
              label="DisplayKey.get(&quot;Web.Policy.WC.CoveredStates&quot;)"
              value="wcLine.Jurisdictions*.State.join(&quot;,&quot;)"/>
            <InputIterator
              elementName="coveragePattern"
              forceRefreshDespiteChangedEntries="true"
              id="WCCoverageGroupIterator"
              value="wcGroupCoveragePatterns"
              valueType="gw.api.productmodel.CoveragePattern[]">
              <IteratorSort
                sortBy="coveragePattern.Priority"
                sortOrder="1"/>
              <InputSetRef
                def="CoverageInputSet(coveragePattern, wcLine, true)"
                mode="coveragePattern.PublicID"/>
            </InputIterator>
            <InputIterator
              elementName="exclusionPattern"
              forceRefreshDespiteChangedEntries="true"
              id="WCExclusionGroupIterator"
              value="wcGroupExclusionPatterns"
              valueType="gw.api.productmodel.ExclusionPattern[]">
              <IteratorSort
                sortBy="exclusionPattern.Priority"
                sortOrder="1"/>
              <InputSetRef
                def="CoverageInputSet(exclusionPattern, wcLine, true)"
                mode="exclusionPattern.PublicID"/>
            </InputIterator>
          </InputColumn>
        </DetailViewPanel>
      </PanelRef>
    </Card>
    <Code><![CDATA[uses gw.api.util.StateJurisdictionMappingUtil

//function updateAllBasis(){
//  if((CurrentLocation as pcf.api.Wizard).saveDraft()){
//    wcLine.updateWCExposuresAndModifiers()
//  }
//}

//property get JurisdictionsThatCanBeAdded(): Jurisdiction[] {
//  var existingJurisdictions = wcLine.Jurisdictions.map(\j -> j.State).toSet()
//  var possibleJurisdicitons = wcLine.Branch.LocationStates.toSet()
//  possibleJurisdicitons.removeAll(existingJurisdictions)
//  return possibleJurisdicitons.toTypedArray()
//}

//function getOfficalIDsForJurisdictionThatMatchPNIContactsOfficialIDs(covJuris : WCJurisdiction) : entity.OfficialID[] {
//  return wcLine.Branch.PrimaryNamedInsured.AccountContactRole.AccountContact.Contact.OfficialIDs
//        .where(\ officialID ->
//          officialID.State == StateJurisdictionMappingUtil.getStateMappingForJurisdiction(covJuris.State))
//}

//function outputConverterForOfficialIDs(VALUE : OfficialID[]) : String {
//  var str = ""
//  var first = true
//  for (var Item in VALUE) {
//    var idValue = Item.getOfficialIDValue()
//    if(idValue != null) {
//      if(!first) {
//        str = str + ", "
//      }
//      first = false
//      str = str + idValue
//    }
//  }
//  return str
//}]]></Code>
  </CardViewPanel>
</PCF>